--To set the server name, use the following command to edit the host name. Remember to do this on all nodes.
sudo vi /etc/hostname

--add the SQL Server repository to the yum package manager:
sudo curl -o /etc/yum.repos.d/mssql-server.repo https://packages.microsoft.com/config/rhel/7/mssql-server.repo

--update the package manager and install SQL Server 2017:
sudo yum update
sudo yum install -y mssql-server

--Configure SQL Server
sudo /opt/mssql/bin/mssql-conf setup

--make sure that the SQL Server service is running.
systemctl status mssql-server

--Install SQL Agent
sudo yum install mssql-server-agent
sudo systemctl restart mssql-server

--configure the built-in firewall to allow connections to TCP port 1433. This assumes that you're using the firewall package FirewallD.
sudo firewall-cmd --zone=public --add-port=1433/tcp --permanent
sudo firewall-cmd --reload

--enable Always On Availabilty Groups
sudo /opt/mssql/bin/mssql-conf set hadr.hadrenabled  1
sudo systemctl restart mssql-server

--set up an extended events session, which will aid with troubleshooting availability groups issues. This is a Transact-SQL command that must be run from inside the SQL Server instance.
ALTER EVENT SESSION AvailabilityGroupHealth ON SERVER WITH (STARTUP_STATE = ON);

--Setting up the database mirroring endpoint user and certificate.
-- Create database mirroring endpoint user
CREATE LOGIN dbm_login WITH PASSWORD = '<UseAReallyStrongPassword>';
CREATE USER dbm_user FOR LOGIN dbm_login;
GO
-- Create certificate
CREATE MASTER KEY ENCRYPTION BY PASSWORD = '<UseAReallyStrongMasterKeyPassword>';
CREATE CERTIFICATE dbm_certificate WITH SUBJECT = 'dbm';
BACKUP CERTIFICATE dbm_certificate
    TO FILE = '/var/opt/mssql/data/dbm_certificate.cer'
    WITH PRIVATE KEY (
           FILE = '/var/opt/mssql/data/dbm_certificate.pvk',
           ENCRYPTION BY PASSWORD = '<UseAReallyStrongPrivateKeyPassword>'
    );
GO

--Code listing X-1: Setting up the database mirroring endpoint user and certificate.
-- Create database mirroring endpoint user
CREATE LOGIN dbm_login WITH PASSWORD = '<UseAReallyStrongPassword>';
CREATE USER dbm_user FOR LOGIN dbm_login;
GO
-- Create certificate
CREATE MASTER KEY ENCRYPTION BY PASSWORD = '<UseAReallyStrongMasterKeyPassword>';
CREATE CERTIFICATE dbm_certificate WITH SUBJECT = 'dbm';
BACKUP CERTIFICATE dbm_certificate
    TO FILE = '/var/opt/mssql/data/dbm_certificate.cer'
    WITH PRIVATE KEY (
           FILE = '/var/opt/mssql/data/dbm_certificate.pvk',
           ENCRYPTION BY PASSWORD = '<UseAReallyStrongPrivateKeyPassword>'
    );
GO

--Code listing X-2: Setting up the database mirroring certificate on the availability replica.
CREATE MASTER KEY ENCRYPTION BY PASSWORD = '<UseAReallyStrongMasterKeyPassword>';
CREATE CERTIFICATE dbm_certificate   
    AUTHORIZATION dbm_user
    FROM FILE = '/var/opt/mssql/data/dbm_certificate.cer'
    WITH PRIVATE KEY (
    FILE = '/var/opt/mssql/data/dbm_certificate.pvk',
    DECRYPTION BY PASSWORD = '<UseAReallyStrongPrivateKeyPassword>'
    );

--Code listing X-3: Creating the database mirroring endpoint.
CREATE ENDPOINT [Hadr_endpoint]
    AS TCP (LISTENER_IP = (0.0.0.0), LISTENER_PORT = 5022)
    FOR DATA_MIRRORING (
        ROLE = ALL,
        AUTHENTICATION = CERTIFICATE dbm_certificate,
        ENCRYPTION = REQUIRED ALGORITHM AES
        );
ALTER ENDPOINT [Hadr_endpoint] STATE = STARTED;
GRANT CONNECT ON ENDPOINT::[Hadr_endpoint] TO [dbm_login];

--Code listing X-4: Creating the availability group with three synchronous replicas..
CREATE AVAILABILITY GROUP [LinuxAG1]
    WITH (DB_FAILOVER = ON, CLUSTER_TYPE = EXTERNAL)
    FOR REPLICA ON
        N'server1' 
         WITH (
            ENDPOINT_URL = N'tcp://server1:5022',
            AVAILABILITY_MODE = SYNCHRONOUS_COMMIT,
            FAILOVER_MODE = EXTERNAL,
            SEEDING_MODE = AUTOMATIC
            ),
        N'server2' 
         WITH ( 
            ENDPOINT_URL = N'tcp://server2:5022', 
            AVAILABILITY_MODE = SYNCHRONOUS_COMMIT,
            FAILOVER_MODE = EXTERNAL,
            SEEDING_MODE = AUTOMATIC
            ),
        N'server3'
        WITH( 
           ENDPOINT_URL = N'tcp://server3:5022', 
           AVAILABILITY_MODE = SYNCHRONOUS_COMMIT,
           FAILOVER_MODE = EXTERNAL,
           SEEDING_MODE = AUTOMATIC
           );
GO
ALTER AVAILABILITY GROUP [LinuxAG1] GRANT CREATE ANY DATABASE;
--join the secondary replicas to your freshly minted availability group, run the following Transact-SQL on each secondary.
ALTER AVAILABILITY GROUP [LinuxAG1] JOIN WITH (CLUSTER_TYPE = EXTERNAL);
ALTER AVAILABILITY GROUP [LinuxAG1] GRANT CREATE ANY DATABASE;

--add the database to the availability group with the following Transact-SQL command:
ALTER AVAILABILITY GROUP [LinuxAG1] ADD DATABASE [<dbname>];

--Check synchronization status 
SELECT * FROM sys.databases WHERE name = '<dbname>';
GO
SELECT
    DB_NAME(database_id) AS 'database',
    synchronization_state_desc
FROM sys.dm_hadr_database_replica_states;

--Install Pacemaker from the command line, on each node.
sudo yum install pacemaker pcs fence-agents-all resource-agents
sudo passwd hacluster

--pcsd service is required to allow nodes to rejoin the cluster after a reboot. This should be run on all nodes for the cluster.
sudo systemctl enable pcsd
sudo systemctl start pcsd
sudo systemctl enable pacemaker

--Create the cluster. Make sure password is the same for all nodes.
sudo pcs cluster auth server1 server2 server3 -u hacluster -p <password>
sudo pcs cluster setup --name <clusterName> server1 server2 server3
sudo pcs cluster start --all
--install the SQL Server resource agent.
sudo yum install mssql-server-ha

--Disable node restart after failure
sudo pcs property set start-failure-is-fatal=false

--Code listing X-5: Creating Pacemaker authentication and authorization.
USE [master];
GO
CREATE LOGIN [pacemakerLogin] with PASSWORD = N'UseAReallyStrongMasterKeyPassword';
GO
ALTER SERVER ROLE [sysadmin] ADD MEMBER [pacemakerLogin];
GRANT ALTER, CONTROL, VIEW DEFINITION ON AVAILABILITY GROUP::LinuxAG1 TO pacemakerLogin;
GRANT VIEW SERVER STATE TO pacemakerLogin;

--Save the credentials on the file system for safety, again on all servers.
echo 'pacemakerLogin' >> ~/pacemaker-passwd
echo 'UseAReallyStrongMasterKeyPassword' >> ~/pacemaker-passwd
sudo mv ~/pacemaker-passwd /var/opt/mssql/secrets/passwd
sudo chown root:root /var/opt/mssql/secrets/passwd
sudo chmod 400 /var/opt/mssql/secrets/passwd

--Creates a primary / replica type availability group resource 
sudo pcs resource create ag_cluster ocf:mssql:ag ag_name=LinuxAG1 --master meta notify=true

--Create virtual IP resource on one of the nodes, sample IP provided should change!
sudo pcs resource create virtualip ocf:heartbeat:IPaddr2 ip=172.8.0.120

--Create a colocation constraint to have the virtual IP and primary replica on the same host, run the following command on one node:
sudo pcs constraint colocation add virtualip ag_cluster-master INFINITY with-rsc-role=Master

--Create an ordering constraint, which will wait for the promotion before pointing the virtual IP resource to the new node.
sudo pcs constraint order promote ag_cluster-master then start virtualip



