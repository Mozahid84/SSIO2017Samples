--Chapter 6:

--Initial Setup and Configure SQL on Azure Linux VM

sudo /opt/mssql/bin/mssql-conf setup 



--Solving Orphaned orphaned SID's

Select 
     DBUser_Name     =         dp.name
,    DBUser_SID      =         dp.sid
,    Login_Name      =         sp.name
,    Login_SID       =         sp.sid
,    SQLtext         =         'ALTER USER [' + dp.name + '] WITH LOGIN = [' + ISNULL(sp.name, '???') + ']'
      from sys.database_principals dp
      left outer join sys.server_principals sp
      on dp.name = sp.name 
      where 
            dp.is_fixed_role = 0
      and sp.sid <> dp.sid 
      and dp.principal_id > 1
      and dp.sid <> 0x0
      order by dp.name


--Overlapping Permissions
use WideWorldImporters;
go
GRANT SELECT on SCHEMA::sales to [domain\katie.sql];
DENY SELECT on OBJECT::sales.InvoiceLines to [domain\katie.sql];

use WideWorldImporters;
go
SELECT TOP 100 * FROM sales.Invoices;
SELECT TOP 100 * FROM sales.InvoiceLines;

--Msg 229, Level 14, State 5, Line 4
--The SELECT permission was denied on the object 'InvoiceLines', database 'WideWorldImporters', schema 'sales'.

REVOKE SELECT on SCHEMA::sales to [domain\katie.sql]
REVOKE SELECT on OBJECT::sales.Invoices to [domain\katie.sql]

SELECT TOP 100 * FROM sales.Invoices;
SELECT TOP 100 * FROM sales.InvoiceLines;

--Msg 229, Level 14, State 5, Line 4
--The SELECT permission was denied on the object 'Invoices', database 'WideWorldImporters', schema 'sales'.
--Msg 229, Level 14, State 5, Line 5
--The SELECT permission was denied on the object 'InvoiceLines', database 'WideWorldImporters', schema 'sales'.

DENY SELECT on SCHEMA::sales to [domain\katie.sql]
GRANT SELECT on OBJECT::sales.InvoiceLines to [domain\katie.sql]

SELECT TOP 100 * FROM sales.Invoices;
SELECT TOP 100 * FROM sales.InvoiceLines;

--Msg 229, Level 14, State 5, Line 4
--The SELECT permission was denied on the object 'Invoices', database 'WideWorldImporters', schema 'sales'.
--Msg 229, Level 14, State 5, Line 5
--The SELECT permission was denied on the object 'InvoiceLines', database 'WideWorldImporters', schema 'sales'.


--Changing database ownership
ALTER AUTHORIZATION ON DATABASE::[databasename]  TO [server_principal];


--Understanding view, stored procedures, and function permissions

USE [master]
GO
CREATE LOGIN DenyPrincipal WITH PASSWORD=N'deny'
GO
GRANT CONNECT SQL TO DenyPrincipal
ALTER LOGIN DenyPrincipal ENABLE
GO
USE [WideWorldImporters]
GO
CREATE USER DenyPrincipal FOR LOGIN DenyPrincipal
GO
CREATE TABLE dbo.DenyPrincipalTable (
ID INT IDENTITY (1,1) NOT NULL CONSTRAINT PK_DenyPrincipalTable PRIMARY KEY,
Text1 VARCHAR(100) )
GO
INSERT INTO dbo.DenyPrincipalTable (Text1) VALUES ('test')
GO 3

CREATE VIEW dbo.denyview WITH SCHEMABINDING AS 

SELECT DenyView = text1 FROM dbo.DenyPrincipalTable

GO

GRANT SELECT ON dbo.denyview TO [DenyPrincipal]
GO


--Check current user impersonation
SELECT ORIGINAL_LOGIN(), CURRENT_USER; 


EXECUTE AS USER = 'DenyPrincipal';
SELECT * FROM dbo.DenyPrincipalTable;
GO
REVERT;
--This results in the following error:
--Msg 229, Level 14, State 5, Line 41
--The SELECT permission was denied on the object 'DenyPrincipalTable', database 'WideWorldImporters', schema 'dbo'.

EXECUTE AS USER = 'DenyPrincipal';
select * from dbo.DenyView;
GO
REVERT;
--Here are the results:
--DenyView
--test
--test
--test
GO

CREATE PROC dbo.DenySproc AS
BEGIN
SELECT DenySproc = text1 
FROM dbo.DenyPrincipalTable;
END
GO
GRANT EXECUTE ON dbo.DenySproc to [DenyPrincipal];
GO

EXECUTE AS USER = 'DenyPrincipal';
EXEC dbo.DenySproc;
GO
REVERT;
GO
--Here are the results:
--DenySproc
--test
--test
--test
GO
CREATE PROC dbo.DenySproc_adhoc 
AS
BEGIN
DECLARE @sql nvarchar(1000)
SELECT @sql = 'select ExecSproc_adhoc = text1 FROM dbo.DenyPrincipalTable';
EXEC sp_executesql @SQL;
END
GO
GRANT EXECUTE ON dbo.DenySproc_adhoc to [DenyPrincipal];
GO
EXECUTE AS USER = 'DenyPrincipal';
EXEC dbo.DenySproc_adhoc;
GO
REVERT;

--Here are the results:
--Msg 229, Level 14, State 5, Line 75
--The SELECT permission was denied on the object 'DenyPrincipalTable', database 'WideWorldImporters', schema 'dbo'.
GO

CREATE FUNCTION dbo.DenyFunc ()
RETURNS TABLE
AS RETURN
	SELECT DenyFunc = Text1 
	FROM dbo.DenyPrincipalTable;
GO
GRANT SELECT ON DBO.DenyFunc TO [DENYUSER];
GO
EXECUTE AS USER = 'DenyPrincipal';
SELECT * FROM DenyFunc();
GO
REVERT;
GO
--Here are the results:
--DenyFun
--test
--test
--test


DENY SELECT ON dbo.DenyPrincipalTable TO [DenyPrincipal];
GO
EXECUTE AS USER = 'DenyPrincipal';
SELECT * FROM dbo.denyview; --test the view 
GO
EXEC dbo.DenySproc; --test the stored procedure
GO
SELECT * FROM DenyFunc();
GO
REVERT;
GO

--Here are the results:
--DenyView
--test
--test
--test
--DenySproc
--test
--test
--test
--DenyFunc
--test
--test
--test


--Assigning server role membership appropriately

ALTER SERVER ROLE serveradmin ADD MEMBER [domain\katie.sql]
GO
ALTER SERVER ROLE processadmin DROP MEMBER [domain\katie.sql]
GO

USE Master;
GO
CREATE LOGIN [domain\katie.sql] FROM WINDOWS;
GO
GRANT CONTROL SERVER TO  [domain\katie.sql] ;
DENY VIEW SERVER STATE TO  [domain\katie.sql];
GO
EXECUTE AS LOGIN = 'domain\katie.sql';
SELECT * FROM sys.dm_exec_cached_plans;
GO
REVERT;
GO

--Result
--Msg 300, Level 14, State 1, Line 7
--VIEW SERVER STATE permission was denied on object 'server', database 'master'.
--Msg 297, Level 16, State 1, Line 7
--The user does not have permission to perform this action.


--Create a new custom server role
CREATE SERVER ROLE SupportViewServer;
GO
--Grant permissions to the custom server role
--Run DMVs, see server information
GRANT 
VIEW SERVER STATE 
to SupportViewServer;
--See metadata of any database
GRANT 
VIEW ANY DATABASE 
to SupportViewServer; 
--Set context to any database
GRANT 
CONNECT ANY DATABASE 
to SupportViewServer; 

--Permission to SELECT from any data object in any databases 
GRANT 
SELECT ALL USER SECURABLES 
to SupportViewServer; 
GO
--Add the DBA team's accounts
ALTER SERVER ROLE SupportViewServer ADD MEMBER [domain\Katherine]
ALTER SERVER ROLE SupportViewServer ADD MEMBER [domain\Colby]
ALTER SERVER ROLE SupportViewServer ADD MEMBER [domain\David]


--Create a new custom database role
USE [WideWorldImporters]
GO
-- Create the database role
CREATE ROLE SalesReadOnly AUTHORIZATION [dbo];
GO
-- Grant access rights to a specific schema in the database
GRANT EXECUTE
ON [Website].[SearchForSuppliers]
TO SalesReadOnly;
GO


--Add User to built-in database role
ALTER ROLE db_owner ADD MEMBER [domain\katie.sql];
GO
-- Add User to custom database role
ALTER ROLE SalesReadOnly ADD MEMBER [domain\James]
ALTER ROLE SalesReadOnly ADD MEMBER [domain\Alex]
ALTER ROLE SalesReadOnly ADD MEMBER [domain\Naomi]
ALTER ROLE SalesReadOnly ADD MEMBER [domain\Amos]
ALTER ROLE SalesReadOnly ADD MEMBER [domain\Shed]
GO
--Remove User from database role
ALTER ROLE SalesReadOnly DROP MEMBER [domain\Shed];
GO

--DedicatedAdministratorConnection

--In Windows PowerShell, the DedicatedAdministratorConnection parameter of the Invoke-SQLCMD cmdlet provides a connection to the DAC. For example:
Invoke-SQLCmd -ServerInstance servername -Database master -Query "Select @@Servername" -DedicatedAdministratorConnection 
--Or, for a named instance (ensure that the SQL browser is running):
Invoke-SQLCmd -ServerInstance servername\instnacename -Database master -Query "Select @@Servername" -DedicatedAdministratorConnection 


--Migrating Windows-authenticated logins by using T-SQL (SQL Server only)
--Create windows logins
SELECT
CreateTSQL_Source = 'CREATE LOGIN ['+ name +'] FROM WINDOWS WITH DEFAULT_DATABASE=['+default_database_name+'], DEFAULT_LANGUAGE=['+default_language_name+']' 
FROM sys.server_principals
WHERE type in ('U','G')
AND name not like 'NT %'
AND is_disabled = 0
ORDER BY name, type_desc;


--Migrating SQL Server-authenticated logins by using T-SQL (SQL Server only)
--You can find this article at https://support.microsoft.com/help/918992/.



--Migrating server roles by using T-SQL (SQL Server only)
--SERVER LEVEL ROLES
SELECT DISTINCT
   SERVER_ROLE_NAME  =  QUOTENAME(R.NAME) 
,  ROLE_TYPE  =  R.TYPE_DESC
,  PRINCIPAL_NAME  =  QUOTENAME(M.NAME)
,  PRINCIPAL_TYPE  =  M.TYPE_DESC 
,  SQL2008R2_BELOW_CREATETSQL      = 'SP_ADDSRVROLEMEMBER  @LOGINAME=  '''+M.NAME+''',  @ROLENAME = '''+R.NAME+'''' 
,  SQL2012_ABOVE_CREATETSQL      = 'ALTER SERVER ROLE [' + R.NAME + '] ADD MEMBER [' + M.NAME + ']'
FROM      SYS.SERVER_ROLE_MEMBERS AS RM
INNER JOIN SYS.SERVER_PRINCIPALS R ON RM.ROLE_PRINCIPAL_ID = R.PRINCIPAL_ID
INNER JOIN SYS.SERVER_PRINCIPALS M ON RM.MEMBER_PRINCIPAL_ID = M.PRINCIPAL_ID
WHERE R.IS_DISABLED = 0 AND M.IS_DISABLED = 0  -- IGNORE DISABLED ACCOUNTS
AND M.NAME NOT IN ('DBO', 'SA') -- IGNORE BUILT-IN ACCOUNTS
ORDER BY QUOTENAME(R.NAME);

--Migrating server permissions by using T-SQL (SQL Server only)
--SERVER LEVEL SECURITY
   PERMISSION_STATE  =  RM.STATE_DESC
,  PERMISSION  =  RM.PERMISSION_NAME
,  PRINCIPAL_NAME  =  QUOTENAME(U.NAME)
,  PRINCIPAL_TYPE  =  U.TYPE_DESC
,  CREATETSQL_SOURCE = RM.STATE_DESC + N' ' + RM.PERMISSION_NAME + 
	CASE WHEN E.NAME IS NOT NULL THEN 'ON ENDPOINT::[' + E.NAME + '] ' ELSE '' END +
	N' TO ' + CAST(QUOTENAME(U.NAME COLLATE DATABASE_DEFAULT) AS NVARCHAR(256)) + ';'
FROM SYS.SERVER_PERMISSIONS RM
INNER JOIN SYS.SERVER_PRINCIPALS U 
ON RM.GRANTEE_PRINCIPAL_ID = U.PRINCIPAL_ID
LEFT OUTER JOIN SYS.ENDPOINTS E
ON E.ENDPOINT_ID = MAJOR_ID AND CLASS_DESC = 'ENDPOINT'
WHERE U.NAME NOT LIKE '##%' -- IGNORE SYSTEM ACCOUNTS
AND U.NAME NOT IN ('DBO', 'SA' -- IGNORE BUILT-IN ACCOUNTS
ORDER BY RM.PERMISSION_NAME, U.NAME;
